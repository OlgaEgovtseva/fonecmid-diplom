
#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаскраситьСтроку();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтпускаСотрудников

&НаКлиенте
Процедура ОтпускаСотрудниковДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтпускаСотрудников.ТекущиеДанные;
	ТекущиеДанные.КоличествоДнейОтпуска = (НачалоДня(ТекущиеДанные.ДатаОкончания) -  НачалоДня(ТекущиеДанные.ДатаНачала)) / (60*60*24);
	
	РаскраситьСтроку();
			
КонецПроцедуры

&НаКлиенте
Процедура ОтпускаСотрудниковДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтпускаСотрудников.ТекущиеДанные;
	ТекущиеДанные.КоличествоДнейОтпуска = (КонецДня(ТекущиеДанные.ДатаОкончания) -  НачалоДня(ТекущиеДанные.ДатаНачала) - 86400) / (60*60*24);
	
	РаскраситьСтроку();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АнализГрафика(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Год) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Заполните год.");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", ПоместитьДанныеВоВременноеХранилище());
	ПараметрыФормы.Вставить("Год", ПоместитьГодВоВременноеХранилище());
	ОткрытьФорму("Документ.ВКМ_ГрафикОтпусков.Форма.АнализГрафика", ПараметрыФормы, ЭтотОбъект); 

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
&НаСервере
Функция ПоместитьДанныеВоВременноеХранилище()
	Данные = ПоместитьВоВременноеХранилище(Объект.ОтпускаСотрудников.Выгрузить(), УникальныйИдентификатор);
	Возврат Данные;
КонецФункции

&НаСервере
Функция ПоместитьГодВоВременноеХранилище()
	Год = ПоместитьВоВременноеХранилище(Объект.Год, УникальныйИдентификатор); 
	Возврат Год;
КонецФункции

&НаСервере
Процедура РаскраситьСтроку() 
	
	ТабЗн =  Объект.ОтпускаСотрудников.Выгрузить(,"Сотрудник, КоличествоДнейОтпуска" );
	ТабЗн.Свернуть("Сотрудник", "КоличествоДнейОтпуска");
	МассивСотрудников = Новый Массив;
	 
	Для Каждого Строка ИЗ ТабЗн Цикл
	 	
		Если Строка.КоличествоДнейОтпуска >  28  Тогда 
		 
			//@skip-check bsl-legacy-check-dynamic-feature-access
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("ВНИМАНИЕ! Общая длительность всех отпусков превышает 28 дней у сотрудника %1. И составляет %2 дней", Строка.Сотрудник, Строка.КоличествоДнейОтпуска));
		 	МассивСотрудников.Добавить(Строка.Сотрудник); 
		КонецЕсли;	
	КонецЦикла;	
	 
	УсловноеОформление.Элементы.Очистить();
	 
	Для каждого Элемент Из МассивСотрудников Цикл
		 Оформление  = УсловноеОформление.Элементы.Добавить();
		 Оформление.Использование = Истина;
		 
		 ПолеОформляемое1 = Оформление.Поля.Элементы.Добавить();
		 ПолеОформляемое1.Поле = Новый ПолеКомпоновкиДанных("ОтпускаСотрудниковСотрудник");
		 ПолеОформляемое2 = Оформление.Поля.Элементы.Добавить();
		 ПолеОформляемое2.Поле = Новый ПолеКомпоновкиДанных("ОтпускаСотрудниковДатаНачала");
		 ПолеОформляемое3 = Оформление.Поля.Элементы.Добавить();
		 ПолеОформляемое3.Поле = Новый ПолеКомпоновкиДанных("ОтпускаСотрудниковДатаОкончания");
		
		 Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтпускаСотрудников.Сотрудник");
		 Отбор.ПравоеЗначение = Элемент;
		 Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		 Отбор.Использование = Истина;
		 Оформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти
