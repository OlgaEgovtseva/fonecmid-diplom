
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.ВКМ_ОсновныеНачисления.Записывать = Истина;
	Движения.ВКМ_ДополнительныеНачисления.Записывать = Истина; 
	Движения.ВКМ_Удержания.Записывать = Истина;
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;
	
	//Регистр ВКМ_ОсновныеНачисления
	Для Каждого Строка Из ОсновныеНачисления Цикл 
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.ВидРасчета = Строка.ВидРасчета;
		Движение.ПериодДействияНачало = Строка.ДатаНачала;
		Движение.ПериодДействияКонец = Строка.ДатаОкончания;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = Строка.Сотрудник;
		Движение.ГрафикРаботы = Строка.ГрафикРаботы;
		
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда 
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачала, -12));
		    Движение.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(Строка.ДатаОкончания, -1));
		ИначеЕсли Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад Тогда 
			Движение.БазовыйПериодНачало = НачалоМесяца(Дата);
		    Движение.БазовыйПериодКонец = КонецМесяца(Дата);			
		КонецЕсли;
				
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать();
	
	//Регистр ВКМ_ДополнительныеНачисления
	Для Каждого Строка Из ДополнительныеНачисления Цикл 
		
		Движение = Движения.ВКМ_ДополнительныеНачисления.Добавить();
		Движение.ВидРасчета = Строка.ВидРасчета;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = Строка.Сотрудник;
		
	КонецЦикла;
	
	Движения.ВКМ_ДополнительныеНачисления.Записать();
	
	НаборЗаписейОсн = РегистрыРасчета.ВКМ_ОсновныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписейОсн.Отбор.Регистратор.Значение = Ссылка; 
	НаборЗаписейОсн.Прочитать();                         
	
	НаборЗаписейДоп = РегистрыРасчета.ВКМ_ДополнительныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписейДоп.Отбор.Регистратор.Значение = Ссылка;
	НаборЗаписейДоп.Прочитать();
	
	ТЗДляУдержаний = Новый ТаблицаЗначений;
	ТЗДляУдержаний.Колонки.Добавить("Сотрудник");
	ТЗДляУдержаний.Колонки.Добавить("Результат");
		
	Для Каждого Строка Из НаборЗаписейОсн Цикл 
		
		нСтрока = ТЗДляУдержаний.Добавить();
		нСтрока.Сотрудник = Строка.Сотрудник;
		нСтрока.Результат = Строка.Результат;
		
	КонецЦикла;  
	
	Для Каждого Строка Из НаборЗаписейДоп Цикл 
		
		нСтрока = ТЗДляУдержаний.Добавить();
		нСтрока.Сотрудник = Строка.Сотрудник;
		нСтрока.Результат = Строка.Результат;
		
	КонецЦикла;
	
	ТЗДляУдержаний.Свернуть("Сотрудник", "Результат");
	
	Для Каждого СтрокаТЗ Из ТЗДляУдержаний Цикл 
		
		//Регистр ВКМ_Удержания
		Движение = Движения.ВКМ_Удержания.Добавить();
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		Движение.Сотрудник = СтрокаТЗ.Сотрудник;
		Движение.ПериодРегистрации = Дата; 
		Движение.БазовыйПериодНачало = НачалоМесяца(Дата);
		Движение.БазовыйПериодКонец = КонецМесяца(Дата);
		
		//Регистр ВКМ_ВзаиморасчетыССотрудниками
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Сотрудник = СтрокаТЗ.Сотрудник;
		
	КонецЦикла;
	
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать();
	Движения.ВКМ_Удержания.Записать();
	
	ОкладРассчитан = РасчитатьОклад();
	
	Если НЕ ОкладРассчитан Тогда  
		ОбщегоНазначения.СообщитьПользователю("Проведение документа отменено");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РасчитатьОтпуск(); 
	РасчитатьПремию();
	РасчитатьНДФЛ();
		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РасчитатьОклад()
	
	ОкладРассчитан = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад, 0) КАК Оклад,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ДниПериодДействия, 0) КАК ДниПериодДействия,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ДниФактическийПериодДействия, 0) КАК ДниФактическийПериодДействия
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(Регистратор = &Ссылка
	|	И ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВКМ_ОсновныеНачисления.Оклад)) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, Сотрудник В
	|			(ВЫБРАТЬ
	|				ВКМ_НачислениеЗарплатыОсновныеНачисления.Сотрудник
	|			ИЗ
	|				Документ.ВКМ_НачислениеЗарплаты.ОсновныеНачисления КАК ВКМ_НачислениеЗарплатыОсновныеНачисления
	|			ГДЕ
	|				ВКМ_НачислениеЗарплатыОсновныеНачисления.Ссылка = &Ссылка)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|		ПО ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если Выборка.Оклад = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Для сотрудника %1 не установлен оклад", 
													Выборка.Сотрудник),
													,
													СтрШаблон("ОсновныеНачисления[%1].Сотрудник", XMLСтрока(Выборка.НомерСтроки - 1)));
													
			ОкладРассчитан = Ложь;
			Продолжить;
		КонецЕсли;
		
			
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Движение.Показатель = Выборка.Оклад; 
		Движение.ОтработаноДней = Выборка.ДниФактическийПериодДействия;  
		
		Если Выборка.ДниПериодДействия = Выборка.ДниФактическийПериодДействия Тогда 
			Движение.Результат = Выборка.Оклад;
		Иначе
			Движение.Результат = (Выборка.Оклад / Выборка.ДниПериодДействия) * Выборка.ДниФактическийПериодДействия;
		КонецЕсли;
				
	КонецЦикла;
		
	Возврат ОкладРассчитан;
	
КонецФункции	

Процедура РасчитатьОтпуск()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.РезультатБаза, 0) КАК База,
	|	РАЗНОСТЬДАТ(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ПериодДействияНачало,
	|		ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) + 1 КАК ФактДней,
	|	ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ОтработаноДнейБаза КАК ОтработаноДнейБаза,
	|	ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ПериодДействияКонец КАК ПериодДействияКонец
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(&Измерения, &Измерения,, Регистратор = &Ссылка
	|	И ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск)) КАК
	|		ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления";
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Измерения", Измерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Движение.Показатель = Выборка.База / Выборка.ОтработаноДнейБаза;
		Движение.Результат = Выборка.ФактДней * Движение.Показатель;
		Движение.ДнейОтпуска = (Выборка.ПериодДействияКонец + 1 - Выборка.ПериодДействияНачало) / (24 * 3600);
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);

КонецПроцедуры

Процедура РасчитатьПремию()
	
	ЕстьПроцент = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот,
	|	ВКМ_ВыполненныеСотрудникомРаботыОбороты.СуммаКОплатеОборот КАК СуммаКОплатеОборот,
	|	ВКМ_ДополнительныеНачисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы.Обороты КАК ВКМ_ВыполненныеСотрудникомРаботыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних КАК
	|			ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|		ПО ВКМ_ВыполненныеСотрудникомРаботыОбороты.Сотрудник = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ДополнительныеНачисления КАК ВКМ_ДополнительныеНачисления
	|		ПО ВКМ_ВыполненныеСотрудникомРаботыОбороты.Сотрудник = ВКМ_ДополнительныеНачисления.Сотрудник
	|ГДЕ
	|	ВКМ_ДополнительныеНачисления.Регистратор = &Ссылка
	|	И ВКМ_ДополнительныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВКМ_ДополнительныеНачисления.ПроцентОтРабот)"; 
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Движение = Движения.ВКМ_ДополнительныеНачисления[Выборка.НомерСтроки - 1];
		Движение.Процент = Выборка.ПроцентОтРабот;
		Движение.Результат = Выборка.СуммаКОплатеОборот;
		ЕстьПроцент = Истина;
		
	КонецЦикла;
	
	Если ЕстьПроцент Тогда 
		Движения.ВКМ_ДополнительныеНачисления.Записать(, Истина); 
	КонецЕсли;
		
КонецПроцедуры

Процедура РасчитатьНДФЛ()
	
	НДФЛУдержан = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	               |	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	               |	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	               |	ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
	               |	ЕСТЬNULL(ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РезультатБаза, 0) КАК РезультатБазаОсн,
	               |	ЕСТЬNULL(ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.РезультатБаза, 0) КАК РезультатБазаДоп,
	               |	ВКМ_ВзаиморасчетыССотрудниками.НомерСтроки КАК НомерСтрокиВзаиморасчеты
	               |ИЗ
	               |	РегистрРасчета.ВКМ_Удержания.БазаВКМ_ОсновныеНачисления(&Измерения, &Измерения, , Регистратор = &Ссылка) КАК ВКМ_УдержанияБазаВКМ_ОсновныеНачисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_Удержания.БазаВКМ_ДополнительныеНачисления(&Измерения, &Измерения, , Регистратор = &Ссылка) КАК ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления
	               |		ПО ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.Сотрудник = ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВзаиморасчетыССотрудниками КАК ВКМ_ВзаиморасчетыССотрудниками
	               |		ПО (ВКМ_ВзаиморасчетыССотрудниками.Сотрудник = ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.Сотрудник)
	               |ГДЕ
	               |	ВКМ_ВзаиморасчетыССотрудниками.Регистратор = &Ссылка";
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");	
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	НДФЛ = 13;
	
	Пока Выборка.Следующий() Цикл                               
		
		Если ДополнительныеНачисления.Количество() > 0 Тогда
			Показатель = Выборка.РезультатБазаОсн + Выборка.РезультатБазаДоп;
		Иначе 
			Показатель = Выборка.РезультатБазаОсн;
		КонецЕсли;
		
		Удержание = Показатель * НДФЛ / 100;
		
		//Регистр ВКМ_Удержания
		Движение = Движения.ВКМ_Удержания[Выборка.НомерСтроки - 1];
		Движение.Показатель = Показатель;
		Движение.Результат = Удержание;  
		
		//Регистр ВКМ_ВзаиморасчетыССотрудниками
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками[Выборка.НомерСтрокиВзаиморасчеты - 1];
        Движение.Сумма = Показатель - Удержание;
		
		НДФЛУдержан = Истина;
		
	КонецЦикла;
	
	Если НДФЛУдержан Тогда 
		Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать(Истина);
		Движения.ВКМ_Удержания.Записать(, Истина);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
